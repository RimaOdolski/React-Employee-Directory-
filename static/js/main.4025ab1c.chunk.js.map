{"version":3,"sources":["components/Header/index.js","components/TableHead/index.js","components/TableRows/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","type","name","value","search","placeholder","onChange","searchEmployees","TableHead","scope","onClick","ascending","TableRows","employees","map","employee","key","dob","date","src","picture","thumbnail","alt","first","last","phone","email","Footer","App","state","Employees","results","originalList","sortType","event","target","setState","newEmployee","filter","toLowerCase","indexOf","columnName","newEmployees","console","log","sort","a","b","localeCompare","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"k90GAuBeA,MApBf,SAAgBC,GAChB,OACI,yBAAKC,UAAU,6BACf,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,uBACA,6BAEA,2BACAA,UAAU,SACVC,KAAK,OACLC,KAAK,SACLC,MAAOJ,EAAMK,OACbC,YAAY,sBACZC,SAAUP,EAAMQ,qB,MCGPC,MAhBf,SAAmBT,GACf,OACQ,+BACI,wBAAIC,UAAU,QACV,wBAAIA,UAAU,SAASS,MAAM,OAA7B,SAGA,wBAAIT,UAAU,SAASS,MAAM,MAAMC,QAAU,kBAAOX,EAAMY,UAAU,WAApE,eACA,wBAAIX,UAAU,SAASS,MAAM,MAAMC,QAAU,kBAAOX,EAAMY,UAAU,UAApE,aACA,wBAAIX,UAAU,SAAQS,MAAM,OAA5B,gBACA,wBAAIT,UAAU,SAAQS,MAAM,OAA5B,Y,MCYLG,MAtBf,SAAmBb,GACf,OACI,+BAIKA,EAAMc,UAAUC,KAAI,SAACC,GAClB,OAEA,wBAAIf,UAAU,OAAOgB,IAAKD,EAASE,IAAIC,MACnC,4BAAI,yBAAKC,IAAKJ,EAASK,QAAQC,UAAWC,IAAKP,EAASb,KAAKqB,SAC7D,4BAAKR,EAASb,KAAKqB,OACnB,4BAAKR,EAASb,KAAKsB,MACnB,4BAAKT,EAASU,OACd,4BAAKV,EAASW,a,MCTnBC,MALf,WACI,OAAO,gE,OCoEIC,E,4MAhEbC,MAAQ,CACNC,UAAWA,EAAUC,QACrBC,aAAcF,EAAUC,QACxB3B,OAAQ,GACR6B,SAAS,a,EAIX1B,gBAAkB,SAAA2B,GAAU,IAAD,EACFA,EAAMC,OAAtBjC,EADkB,EAClBA,KAAMC,EADY,EACZA,MACb,EAAKiC,SAAL,eACGlC,EAAOC,IAEV,IAAIkC,EAAc,EAAKR,MAAMG,aAAaM,QAAO,SAAAvB,GAC/C,OAAOA,EAASb,KAAKqB,MAAMgB,cAAcC,QAAQrC,EAAMoC,gBAAkB,GAAKxB,EAASb,KAAKsB,KAAKe,cAAcC,QAAQrC,EAAMoC,gBAAkB,KAEjJ,EAAKH,SAAS,CACZN,UAAWO,K,EAMf1B,UAAY,SAAC8B,GAGX,IAAIC,EAFJC,QAAQC,IAAI,EAAKf,MAAMhB,WAGK,cAAxB,EAAKgB,MAAMI,UACbS,EAAe,EAAKb,MAAMC,UAAUe,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE5C,KAAKuC,GAAYO,cAAcD,EAAE7C,KAAKuC,OAC3F,EAAKL,SAAS,CACZN,UAAWY,EACXT,SAAU,iBAGZS,EAAe,EAAKb,MAAMC,UAAUe,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE7C,KAAKuC,GAAYO,cAAcF,EAAE5C,KAAKuC,OAC3F,EAAKL,SAAS,CACZN,UAAWY,EACXT,SAAU,gB,uDAOd,OACE,6BACE,kBAAC,EAAD,CACE7B,OAAQ6C,KAAKpB,MAAMzB,OACnBG,gBAAiB0C,KAAK1C,kBAExB,2BAAOP,UAAU,uBAEf,kBAAC,EAAD,CACAW,UAAWsC,KAAKtC,YAEhB,kBAAC,EAAD,CACAE,UAAWoC,KAAKpB,MAAMC,aAGxB,kBAAC,EAAD,W,GA5DUoB,aCPEC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCERC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD2GlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.4025ab1c.chunk.js","sourcesContent":["import React from 'react';\nimport \"./style.css\";\n\nfunction Header(props) {\nreturn (\n    <div className=\"jumbotron jumbotron-fluid\">\n    <div className=\"container\">\n      <h1 className=\"display-4\"> Employee Directory</h1>\n      <br/>\n      {}\n      <input \n      className=\"search\" \n      type=\"text\" \n      name=\"search\"\n      value={props.search}\n      placeholder=\"Search for Employee\"\n      onChange={props.searchEmployees}\n      />\n    </div>\n  </div>\n)\n}\n\nexport default Header;","import React from 'react';\nimport \"./style.css\";\n\nfunction TableHead(props) {\n    return (\n            <thead>\n                <tr className=\"head\">\n                    <th className=\"border\" scope=\"col\">IMAGE</th>\n                    {}\n                    {}\n                    <th className=\"border\" scope=\"col\" onClick={ () =>  props.ascending(\"first\")}> FIRST NAME</th>\n                    <th className=\"border\" scope=\"col\" onClick={ () =>  props.ascending(\"last\")}>LAST NAME</th>\n                    <th className=\"border\"scope=\"col\">PHONE NUMBER</th>\n                    <th className=\"border\"scope=\"col\">EMAIL</th>\n                </tr>\n            </thead>\n    )\n}\n\nexport default TableHead;","import React from 'react';\nimport \"./style.css\";\n\nfunction TableRows(props) {\n    return (\n        <tbody>\n        {}\n        {}\n        {}\n            {props.employees.map((employee) => {\n                return(\n            \n                <tr className=\"rows\" key={employee.dob.date}> \n                    <td><img src={employee.picture.thumbnail} alt={employee.name.first} /></td>\n                    <td>{employee.name.first}</td>\n                    <td>{employee.name.last}</td>\n                    <td>{employee.phone}</td>\n                    <td>{employee.email}</td>\n                </tr>\n            ) }\n            )}\n        </tbody>\n    );\n}\n\nexport default TableRows;","import React from 'react';\nimport \"./style.css\";\n\nfunction Footer() {\n    return <footer> Copyright 2020Rima Odolski</footer>\n    \n}\n\nexport default Footer;","import React, {Component} from \"react\";\nimport Header from \"./components/Header\";\nimport TableHeadings from \"./components/TableHead\";\nimport EmployeeRows from \"./components/TableRows\";\nimport Footer from \"./components/Footer\";\nimport Employees from \"./employees.json\";\n\nclass App extends Component {\n  state = {\n    Employees: Employees.results,\n    originalList: Employees.results,\n    search: \"\",\n    sortType:\"ascending\"\n  };\n\n\n  searchEmployees = event => {\n    const {name, value } = event.target\n    this.setState({\n      [name]: value\n    })\n    let newEmployee = this.state.originalList.filter(employee=>{\n      return employee.name.first.toLowerCase().indexOf(value.toLowerCase()) > -1 || employee.name.last.toLowerCase().indexOf(value.toLowerCase()) > -1 \n    })\n    this.setState({\n      Employees: newEmployee\n    })\n};\n\n\n\n  ascending = (columnName) => {\n    console.log(this.state.employees);\n\n    let newEmployees;\n    if (this.state.sortType === \"ascending\") {\n      newEmployees = this.state.Employees.sort((a, b) => a.name[columnName].localeCompare(b.name[columnName]));\n      this.setState({\n        Employees: newEmployees,\n        sortType: \"descending\"\n      })\n    } else {\n      newEmployees = this.state.Employees.sort((a, b) => b.name[columnName].localeCompare(a.name[columnName]));\n      this.setState({\n        Employees: newEmployees,\n        sortType: \"ascending\"\n      })\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Header\n          search={this.state.search}\n          searchEmployees={this.searchEmployees}\n        />\n        <table className=\"table table-striped\">\n          {/* using the ascending from state */}\n          <TableHeadings\n          ascending={this.ascending}\n          />\n          <EmployeeRows \n          employees={this.state.Employees}\n          />\n        </table>\n        <Footer />\n      </div>\n    )\n  }\n}\nexport default App;","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}